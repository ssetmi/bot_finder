import telebot
import psycopg2
from telebot import types

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
db_connection = psycopg2.connect(
    database="bd_bot",
    user="postgres",
    password="password",
    host="localhost",
    port="5433"
)
db_cursor = db_connection.cursor()

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '7660126710:AAGS9Dd2C4PWT0Rio08jXxdWDktwXGCmTaI'
bot = telebot.TeleBot(TOKEN)

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
user_preferences = {}

questions = [
    {"key": "category", "text": "–ö–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
     "options": ["–ë—ã—Å—Ç—Ä–æ–µ –ø–∏—Ç–∞–Ω–∏–µ", "–ö–∞—Ñ–µ", "–ö–æ—Ñ–µ–π–Ω—è", "–ü–∏—Ü—Ü–µ—Ä–∏—è", "–†–µ—Å—Ç–æ—Ä–∞–Ω"]},
    {"key": "order_method", "text": "–ö–∞–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑?",
     "options": ["–°–∞–º–æ–≤—ã–≤–æ–∑ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è", "–¢—Ä–µ–±—É–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä", "–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å—å"]},
    {"key": "payment_method", "text": "–ö–∞–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑?",
     "options": ["–ù–∞–ª–∏—á–Ω—ã–º–∏", "–ö–∞—Ä—Ç–æ–π", "–°–ë–ü", "SberPay"]},
    {"key": "cuisine", "text": "–ö–∞–∫—É—é –∫—É—Ö–Ω—é –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
     "options": ["–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è", "–î–æ–º–∞—à–Ω—è—è", "–†—É—Å—Å–∫–∞—è", "–°–º–µ—à–∞–Ω–Ω–∞—è", "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è", "–ö–∞–≤–∫–∞–∑—Å–∫–∞—è"]},
    {"key": "price", "text": "–ù–∞ –∫–∞–∫–∏–µ —Ü–µ–Ω—ã –±–ª—é–¥ –≤—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?",
     "options": ["–ù–∏–∑–∫–∏–µ", "–°—Ä–µ–¥–Ω–∏–µ", "–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ", "–í—ã—Å–æ–∫–∏–µ"]},
    {"key": "schedule", "text": "–ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –∑–∞–≤–µ–¥–µ–Ω–∏—è –≤–∞—Å —É—Å—Ç—Ä–æ–∏—Ç?",
     "options": ["–û—Ç–∫—Ä—ã—Ç–æ —Å–µ–π—á–∞—Å", "–û—Ç–∫—Ä—ã—Ç–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"]},
    {"key": "outdoor", "text": "–í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å—Å—è –Ω–∞ —É–ª–∏—Ü–µ?",
     "options": ["–î–∞", "–ù–µ—Ç"]},
    {"key": "rating", "text": "–ö–∞–∫–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞–≤–µ–¥–µ–Ω–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
     "options": ["–ù–∏–∑–∫–∏–µ", "–°—Ä–µ–¥–Ω–∏–µ", "–í—ã—Å–æ–∫–∏–µ"]},
    {"key": "accessibility", "text": "–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ª–∏ –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–æ–≤?",
     "options": ["–î–∞", "–ù–µ—Ç"]},
    {"key": "parking", "text": "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∫–æ–≤–∫–∞?",
     "options": ["–î–∞", "–ù–µ—Ç"]},
    {"key": "wifi", "text": "–ù—É–∂–µ–Ω –ª–∏ –≤–∞–º Wi-Fi?",
     "options": ["–î–∞", "–ù–µ—Ç"]}
]


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
@bot.message_handler(commands=['start'])
def start(message):
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *FoodFinderBot*! üç¥\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –æ–±–µ–¥–∞ –∏–ª–∏ —É–∂–∏–Ω–∞.\n"
        "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è.\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ *'–î–∞–ª–µ–µ'* –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å. üòä"
    )
    bot.send_message(message.chat.id, welcome_text, parse_mode="Markdown")

    user_preferences[message.chat.id] = {}
    ask_question(message, 0)


# –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
def ask_question(message, question_index):
    if question_index < len(questions):
        question = questions[question_index]
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for option in question['options']:
            markup.add(option)
        bot.send_message(message.chat.id, question['text'], reply_markup=markup)
        bot.register_next_step_handler(message, lambda msg: save_answer(msg, question_index))
    else:
        find_restaurant(message)


# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç
def save_answer(message, question_index):
    question_key = questions[question_index]["key"]
    user_preferences[message.chat.id][question_key] = message.text
    ask_question(message, question_index + 1)


# –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è
def find_restaurant(message):
    preferences = user_preferences.get(message.chat.id, {})
    query = """
        SELECT r.name, r.address
        FROM restaurants r
        JOIN categories c ON r.category_id = c.id
        JOIN cuisines cu ON r.cuisine_id = cu.id
        JOIN price_levels p ON r.price_level_id = p.id
        JOIN work_schedules w ON r.work_schedule_id = w.id
        WHERE c.name = %(category)s
        AND cu.name = %(cuisine)s
        AND p.name = %(price)s
        AND w.name = %(schedule)s
        AND r.parking = %(parking)s
        AND r.wifi = %(wifi)s
        AND r.rating = %(rating)s
        AND r.accessibility = %(accessibility)s
        LIMIT 1
    """
    params = {
        "category": preferences.get("category"),
        "cuisine": preferences.get("cuisine"),
        "price": preferences.get("price"),
        "schedule": preferences.get("schedule"),
        "parking": preferences.get("parking") == "–î–∞",
        "wifi": preferences.get("wifi") == "–î–∞",
        "rating": preferences.get("rating"),
        "accessibility": preferences.get("accessibility") == "–î–∞"
    }

    db_cursor.execute(query, params)
    result = db_cursor.fetchone()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞")

    if result:
        bot.send_message(message.chat.id,
                         f"–ú—ã –Ω–∞—à–ª–∏ –¥–ª—è –≤–∞—Å –∑–∞–≤–µ–¥–µ–Ω–∏–µ: {result[0]}, –∞–¥—Ä–µ—Å: {result[1]}.",
                         reply_markup=markup)
    else:
        bot.send_message(message.chat.id,
                         "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                         reply_markup=markup)

    bot.register_next_step_handler(message, restart)


# –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ
def restart(message):
    if message.text == "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞":
        user_preferences[message.chat.id] = {}
        ask_question(message, 0)
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.polling(none_stop=True)